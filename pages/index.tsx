import Head from 'next/head'
import Layout from '../components/Layout'
import Nav from '../components/Nav'
// import Main from '../components/Main'
// import Footer from '../components/Footer'
import Web3 from 'web3'
import fs from 'fs'
import { useEffect, useState } from 'react'

type tasks = {
  content: string
  id: number
  completed: boolean
}[]

// getStaticProps only gets executed in the server,
// thus it has access to the system files
export async function getStaticProps() {
  // Read the contract build generated by the truffle migration
  const contract = JSON.parse(
    fs.readFileSync('./build/contracts/TodoList.json', 'utf8')
  )
  return {
    // Only send the necessary portions of the contract to the client
    props: {
      ACCOUNT_ADDRESS: process.env.ACCOUNT_ADDRESS,
      CONTRACT_ADDRESS: contract.networks['5777'].address,
      CONTRACT_ABI: JSON.stringify(contract.abi),
    },
  }
}

export default function index({
  CONTRACT_ADDRESS,
  CONTRACT_ABI,
  ACCOUNT_ADDRESS,
}: {
  CONTRACT_ADDRESS: string
  CONTRACT_ABI: string
  ACCOUNT_ADDRESS: string
}) {
  const [tasks, setTasks] = useState<tasks>([])
  const [taskAmount, setTaskAmount] = useState(0)
  const [title, setTitle] = useState('')

  // Connect to MetaMask or the local blockchain server
  const web3 = new Web3(Web3.givenProvider || 'http://localhost:9545')

  // Create a Contract instance to interact with the blockchain
  const contract = new web3.eth.Contract(
    JSON.parse(CONTRACT_ABI),
    CONTRACT_ADDRESS
  )

  async function getInitialState() {
    const count = await contract.methods.taskCount().call()
    setTaskAmount(count)
    // Get all the task using a loop based on the task count
    let savedTasks = []
    for (let i = 0; i < count; i++) {
      const task = await contract.methods.tasks(i).call()
      savedTasks.push(task)
    }
    setTasks(savedTasks)
  }

  // Read count to keep track of blockchain state
  useEffect(() => {
    getInitialState()
  }, [])

  async function updateState() {
    const count = await contract.methods.taskCount().call()
    setTaskAmount(count)

    const task = await contract.methods.tasks(count - 1).call()
    setTasks([...tasks, task])
  }

  // Extract the functionality of the contract to JavaScript functions
  // to be used in the client and handle events
  async function createTask(task: string) {
    try {
      await contract.methods.createTask(task).send({ from: ACCOUNT_ADDRESS })
      updateState()
    } catch (error) {
      console.error(error)
    }
  }

  return (
    <Layout>
      <Head>
        <title>Simple Dapp</title>
      </Head>
      <Nav />
      <div className="grid gap-3 place-items-center">
        {/* Fetch Data */}
        <p>Number of tasks: {taskAmount}</p>
        {tasks.map(({ content, id, completed }) => (
          <article key={id}>
            <input
              type="checkbox"
              defaultChecked={completed}
              onClick={async () => {
                await contract.methods
                  .toggleCompleted(id)
                  .send({ from: ACCOUNT_ADDRESS })
                setTasks([])
                let savedTasks = []
                for (let i = 0; i < taskAmount; i++) {
                  const task = await contract.methods.tasks(i).call()
                  savedTasks.push(task)
                }
                setTasks(savedTasks)
              }}
            />
            <p className="inline-block">{content}</p>
          </article>
        ))}

        {/* Interact with contract */}
        <form
          onSubmit={(e) => {
            createTask(title)
            e.preventDefault()
          }}
        >
          <input
            className="dark:border-gray-600 dark:bg-gray-900 transition focus:outline-none border-2 font-medium px-3 py-1 rounded-md focus:border-pink-700 dark:focus:border-pink-400"
            name="title"
            placeholder="Task title"
            onChange={(e) => setTitle(e.target.value)}
          />
          <button className="select-none focus:outline-none focus:ring transition font-medium px-3 py-1 normal-case rounded-md bg-pink-200 text-pink-900 dark:bg-pink-900 dark:text-pink-50 hover:bg-pink-100 dark:hover:bg-pink-800 focus:ring-pink-500 focus:bg-pink-200 dark:focus:bg-pink-900">
            Submit
          </button>
        </form>
        <code>
          <pre>{JSON.stringify(tasks, null, 2)}</pre>
        </code>
        {/* Create a button to connect to MetaMask */}
        {/* <button
          onClick={() =>
            // @ts-ignore
            window.ethereum.request({ method: 'eth_requestAccounts' })
          }
        >
          MetaMask
        </button> */}
      </div>
      {/* <Main /> */}
      {/* <Footer /> */}
    </Layout>
  )
}
